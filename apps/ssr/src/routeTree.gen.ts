/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PagesImport } from './routes/_pages'
import { Route as AppImport } from './routes/_app'
import { Route as PagesIndexImport } from './routes/_pages/index'
import { Route as PagesTermsImport } from './routes/_pages/terms'
import { Route as PagesSignupImport } from './routes/_pages/signup'
import { Route as PagesPrivacyImport } from './routes/_pages/privacy'
import { Route as PagesLoginImport } from './routes/_pages/login'
import { Route as PagesFaqImport } from './routes/_pages/faq'
import { Route as PagesBlogImport } from './routes/_pages/blog'
import { Route as AppFormulasImport } from './routes/_app/formulas'
import { Route as AppChatImport } from './routes/_app/chat'

// Create/Update Routes

const PagesRoute = PagesImport.update({
  id: '/_pages',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const PagesIndexRoute = PagesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PagesRoute,
} as any)

const PagesTermsRoute = PagesTermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => PagesRoute,
} as any)

const PagesSignupRoute = PagesSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => PagesRoute,
} as any)

const PagesPrivacyRoute = PagesPrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => PagesRoute,
} as any)

const PagesLoginRoute = PagesLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PagesRoute,
} as any)

const PagesFaqRoute = PagesFaqImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => PagesRoute,
} as any)

const PagesBlogRoute = PagesBlogImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => PagesRoute,
} as any)

const AppFormulasRoute = AppFormulasImport.update({
  id: '/formulas',
  path: '/formulas',
  getParentRoute: () => AppRoute,
} as any)

const AppChatRoute = AppChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_pages': {
      id: '/_pages'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PagesImport
      parentRoute: typeof rootRoute
    }
    '/_app/chat': {
      id: '/_app/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof AppChatImport
      parentRoute: typeof AppImport
    }
    '/_app/formulas': {
      id: '/_app/formulas'
      path: '/formulas'
      fullPath: '/formulas'
      preLoaderRoute: typeof AppFormulasImport
      parentRoute: typeof AppImport
    }
    '/_pages/blog': {
      id: '/_pages/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof PagesBlogImport
      parentRoute: typeof PagesImport
    }
    '/_pages/faq': {
      id: '/_pages/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof PagesFaqImport
      parentRoute: typeof PagesImport
    }
    '/_pages/login': {
      id: '/_pages/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PagesLoginImport
      parentRoute: typeof PagesImport
    }
    '/_pages/privacy': {
      id: '/_pages/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PagesPrivacyImport
      parentRoute: typeof PagesImport
    }
    '/_pages/signup': {
      id: '/_pages/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof PagesSignupImport
      parentRoute: typeof PagesImport
    }
    '/_pages/terms': {
      id: '/_pages/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof PagesTermsImport
      parentRoute: typeof PagesImport
    }
    '/_pages/': {
      id: '/_pages/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PagesIndexImport
      parentRoute: typeof PagesImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppChatRoute: typeof AppChatRoute
  AppFormulasRoute: typeof AppFormulasRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppChatRoute: AppChatRoute,
  AppFormulasRoute: AppFormulasRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface PagesRouteChildren {
  PagesBlogRoute: typeof PagesBlogRoute
  PagesFaqRoute: typeof PagesFaqRoute
  PagesLoginRoute: typeof PagesLoginRoute
  PagesPrivacyRoute: typeof PagesPrivacyRoute
  PagesSignupRoute: typeof PagesSignupRoute
  PagesTermsRoute: typeof PagesTermsRoute
  PagesIndexRoute: typeof PagesIndexRoute
}

const PagesRouteChildren: PagesRouteChildren = {
  PagesBlogRoute: PagesBlogRoute,
  PagesFaqRoute: PagesFaqRoute,
  PagesLoginRoute: PagesLoginRoute,
  PagesPrivacyRoute: PagesPrivacyRoute,
  PagesSignupRoute: PagesSignupRoute,
  PagesTermsRoute: PagesTermsRoute,
  PagesIndexRoute: PagesIndexRoute,
}

const PagesRouteWithChildren = PagesRoute._addFileChildren(PagesRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PagesRouteWithChildren
  '/chat': typeof AppChatRoute
  '/formulas': typeof AppFormulasRoute
  '/blog': typeof PagesBlogRoute
  '/faq': typeof PagesFaqRoute
  '/login': typeof PagesLoginRoute
  '/privacy': typeof PagesPrivacyRoute
  '/signup': typeof PagesSignupRoute
  '/terms': typeof PagesTermsRoute
  '/': typeof PagesIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AppRouteWithChildren
  '/chat': typeof AppChatRoute
  '/formulas': typeof AppFormulasRoute
  '/blog': typeof PagesBlogRoute
  '/faq': typeof PagesFaqRoute
  '/login': typeof PagesLoginRoute
  '/privacy': typeof PagesPrivacyRoute
  '/signup': typeof PagesSignupRoute
  '/terms': typeof PagesTermsRoute
  '/': typeof PagesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/_pages': typeof PagesRouteWithChildren
  '/_app/chat': typeof AppChatRoute
  '/_app/formulas': typeof AppFormulasRoute
  '/_pages/blog': typeof PagesBlogRoute
  '/_pages/faq': typeof PagesFaqRoute
  '/_pages/login': typeof PagesLoginRoute
  '/_pages/privacy': typeof PagesPrivacyRoute
  '/_pages/signup': typeof PagesSignupRoute
  '/_pages/terms': typeof PagesTermsRoute
  '/_pages/': typeof PagesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/chat'
    | '/formulas'
    | '/blog'
    | '/faq'
    | '/login'
    | '/privacy'
    | '/signup'
    | '/terms'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/chat'
    | '/formulas'
    | '/blog'
    | '/faq'
    | '/login'
    | '/privacy'
    | '/signup'
    | '/terms'
    | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_pages'
    | '/_app/chat'
    | '/_app/formulas'
    | '/_pages/blog'
    | '/_pages/faq'
    | '/_pages/login'
    | '/_pages/privacy'
    | '/_pages/signup'
    | '/_pages/terms'
    | '/_pages/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  PagesRoute: typeof PagesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  PagesRoute: PagesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/_pages"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/chat",
        "/_app/formulas"
      ]
    },
    "/_pages": {
      "filePath": "_pages.tsx",
      "children": [
        "/_pages/blog",
        "/_pages/faq",
        "/_pages/login",
        "/_pages/privacy",
        "/_pages/signup",
        "/_pages/terms",
        "/_pages/"
      ]
    },
    "/_app/chat": {
      "filePath": "_app/chat.tsx",
      "parent": "/_app"
    },
    "/_app/formulas": {
      "filePath": "_app/formulas.tsx",
      "parent": "/_app"
    },
    "/_pages/blog": {
      "filePath": "_pages/blog.tsx",
      "parent": "/_pages"
    },
    "/_pages/faq": {
      "filePath": "_pages/faq.tsx",
      "parent": "/_pages"
    },
    "/_pages/login": {
      "filePath": "_pages/login.tsx",
      "parent": "/_pages"
    },
    "/_pages/privacy": {
      "filePath": "_pages/privacy.tsx",
      "parent": "/_pages"
    },
    "/_pages/signup": {
      "filePath": "_pages/signup.tsx",
      "parent": "/_pages"
    },
    "/_pages/terms": {
      "filePath": "_pages/terms.tsx",
      "parent": "/_pages"
    },
    "/_pages/": {
      "filePath": "_pages/index.tsx",
      "parent": "/_pages"
    }
  }
}
ROUTE_MANIFEST_END */
