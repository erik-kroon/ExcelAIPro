/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnauthedImport } from './routes/_unauthed'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as UnauthedSignupImport } from './routes/_unauthed/signup'
import { Route as UnauthedLoginImport } from './routes/_unauthed/login'
import { Route as AuthedChatImport } from './routes/_authed/chat'

// Create/Update Routes

const UnauthedRoute = UnauthedImport.update({
  id: '/_unauthed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UnauthedSignupRoute = UnauthedSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => UnauthedRoute,
} as any)

const UnauthedLoginRoute = UnauthedLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => UnauthedRoute,
} as any)

const AuthedChatRoute = AuthedChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_unauthed': {
      id: '/_unauthed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/chat': {
      id: '/_authed/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof AuthedChatImport
      parentRoute: typeof AuthedImport
    }
    '/_unauthed/login': {
      id: '/_unauthed/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UnauthedLoginImport
      parentRoute: typeof UnauthedImport
    }
    '/_unauthed/signup': {
      id: '/_unauthed/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof UnauthedSignupImport
      parentRoute: typeof UnauthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedChatRoute: typeof AuthedChatRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedChatRoute: AuthedChatRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

interface UnauthedRouteChildren {
  UnauthedLoginRoute: typeof UnauthedLoginRoute
  UnauthedSignupRoute: typeof UnauthedSignupRoute
}

const UnauthedRouteChildren: UnauthedRouteChildren = {
  UnauthedLoginRoute: UnauthedLoginRoute,
  UnauthedSignupRoute: UnauthedSignupRoute,
}

const UnauthedRouteWithChildren = UnauthedRoute._addFileChildren(
  UnauthedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof UnauthedRouteWithChildren
  '/chat': typeof AuthedChatRoute
  '/login': typeof UnauthedLoginRoute
  '/signup': typeof UnauthedSignupRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof UnauthedRouteWithChildren
  '/chat': typeof AuthedChatRoute
  '/login': typeof UnauthedLoginRoute
  '/signup': typeof UnauthedSignupRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_unauthed': typeof UnauthedRouteWithChildren
  '/_authed/chat': typeof AuthedChatRoute
  '/_unauthed/login': typeof UnauthedLoginRoute
  '/_unauthed/signup': typeof UnauthedSignupRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/chat' | '/login' | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/chat' | '/login' | '/signup'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_unauthed'
    | '/_authed/chat'
    | '/_unauthed/login'
    | '/_unauthed/signup'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  UnauthedRoute: typeof UnauthedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  UnauthedRoute: UnauthedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/_unauthed"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/chat"
      ]
    },
    "/_unauthed": {
      "filePath": "_unauthed.tsx",
      "children": [
        "/_unauthed/login",
        "/_unauthed/signup"
      ]
    },
    "/_authed/chat": {
      "filePath": "_authed/chat.tsx",
      "parent": "/_authed"
    },
    "/_unauthed/login": {
      "filePath": "_unauthed/login.tsx",
      "parent": "/_unauthed"
    },
    "/_unauthed/signup": {
      "filePath": "_unauthed/signup.tsx",
      "parent": "/_unauthed"
    }
  }
}
ROUTE_MANIFEST_END */
